module EncodedId
  VERSION: ::String

  InvalidConfigurationError: ::StandardError
  EncodedIdFormatError: ::ArgumentError
  EncodedIdLengthError: ::ArgumentError
  InvalidAlphabetError: ::ArgumentError
  InvalidInputError: ::ArgumentError

  class Alphabet
    MIN_UNIQUE_CHARACTERS: ::Integer

    def initialize: (String | ::Array[::String] characters, ::Hash[::String, ::String] ?equivalences) -> void

    attr_reader unique_characters: ::Array[::String]
    attr_reader characters: String
    attr_reader equivalences: ::Hash[::String, ::String] | nil

    def include?: (::String character) -> bool

    def self.modified_crockford: () -> Alphabet

    private

    def valid_input_characters?: ((::Array[::String] | ::String) characters) -> bool

    def valid_characters?: -> bool

    def sufficient_characters?: -> bool

    def unique_character_alphabet: ((::Array[::String] | ::String) characters) -> ::Array[::String]

    def valid_equivalences?: (::Hash[::String, ::String] ?equivalences) -> bool

    def raise_character_set_too_small!: -> untyped

    def raise_invalid_alphabet!: -> void

    def raise_invalid_equivalences!: -> void
  end

  type encodeableValue = ::Array[::String | ::Integer] | ::String | ::Integer
  type encodeableHexValue = ::Array[::String] | ::String

  class HexRepresentation
    def initialize: (::Integer) -> void
    def hex_as_integers: (encodeableHexValue) -> ::Array[::Integer]
    def integers_as_hex: (::Array[::Integer]) -> ::Array[::String]

    private

    def validate_hex_digit_encoding_group_size: (::Integer) -> ::Integer
    def integer_representation: (encodeableHexValue) -> ::Array[::Integer]
    def integers_to_hex_strings: (::Array[::Integer]) -> ::Array[::String]
    def hex_string_as_integer_representation: (::String) -> ::Array[::Integer]
    def hex_string_separator: -> ::Integer
    def remove_non_hex_characters: (::String) -> ::String
    def convert_to_integer_groups: (::String) -> ::Array[::Integer]
  end

  class ReversibleId
    def initialize: (salt: ::String, ?length: ::Integer, ?split_at: ::Integer, ?split_with: ::String, ?alphabet: Alphabet, ?hex_digit_encoding_group_size: ::Integer, ?max_length: ::Integer, ?max_inputs_per_id: ::Integer) -> void

    # Encode the input values into a hash
    def encode: (encodeableValue values) -> ::String

    # Encode hex strings into a hash
    def encode_hex: (encodeableHexValue hexs) -> ::String

    # Decode the hash to original array
    def decode: (::String str) -> ::Array[::Integer]

    # Decode hex strings from a hash
    def decode_hex: (::String str) -> ::Array[::String]

    private

    @encoded_id_generator: ::Hashids
    @split_regex: ::Regexp
    @hex_string_separator: ::Integer

    attr_reader salt: ::String

    attr_reader length: ::Integer
    attr_reader max_length: ::Integer | nil

    attr_reader alphabet: Alphabet

    attr_reader split_at: ::Integer | nil
    attr_reader split_with: ::String

    attr_reader hex_represention_encoder: HexRepresentation

    def validate_alphabet: (Alphabet) -> Alphabet
    def validate_salt: (::String) -> ::String
    def validate_length: (::Integer) -> ::Integer
    def validate_max_length: (::Integer | nil) -> (::Integer | nil)
    def validate_max_input: (::Integer) -> ::Integer
    def validate_split_at: (::Integer | nil) -> (::Integer | nil)
    def validate_split_with: (::String, Alphabet) -> ::String
    def validate_hex_digit_encoding_group_size: (::Integer) -> ::Integer
    def valid_integer_option?: (::Integer | nil) -> bool

    def prepare_input: (untyped value) -> ::Array[::Integer]

    def encoded_id_generator: () -> ::Hashids

    def split_regex: () -> ::Regexp

    def humanize_length: (::String hash) -> ::String

    def convert_to_hash: (::String str, bool) -> ::String

    def map_equivalent_characters: (::String str) -> ::String
    def max_length_exceeded?: (::String str) -> bool
  end
end
