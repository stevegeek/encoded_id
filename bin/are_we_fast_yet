#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"

require "benchmark/ips"
require "encoded_id"
require "hashids"

require "encoded_id/extension"


def run_check(title, &block)
  puts "\n\n# #{title}:"
  puts "-------------------\n\n"

  Benchmark.ips(time: 5, warmup: 1, &block)
end

my_salt = "salt!"

MAX_V = 1_000_000

# Check implementations generate same results
hashids = ::Hashids.new(my_salt)
hashids2 = EncodedId::HashId.new(my_salt)
hashids_c = EncodedId::HashIdC.new
rand1 = Random.new(1234)
rand2 = Random.new(1234)
rand3 = Random.new(1234)
i1 = hashids.encode(*Array.new(10) { rand1.rand(MAX_V) })
i2 = hashids2.encode(*Array.new(10) { rand2.rand(MAX_V) })
i3 = hashids_c.encode(Array.new(10) { rand3.rand(MAX_V) })
puts i1
puts i2
puts i3
raise "Mismatch" if i1 != i2 || i2 != i3 || i1 != i3



raise "Turn off YJIT please" if defined?(RubyVM::YJIT) && RubyVM::YJIT.respond_to?(:enable) && RubyVM::YJIT.enabled?

run_check("#encode") do |x|
  hashids = ::Hashids.new(my_salt)
  hashids2 = EncodedId::HashId.new(my_salt)
  hashids_c = EncodedId::HashIdC.new
  rand1 = Random.new(1234)
  rand2 = Random.new(1234)
  rand3 = Random.new(1234)

  x.report("Hashids") { hashids.encode(*Array.new(10) { rand1.rand(MAX_V) }) }
  x.report("EncodedId::HashId") { hashids2.encode(*Array.new(10) { rand2.rand(MAX_V) }) }
  x.report("EncodedId::HashIdC") { hashids_c.encode(Array.new(10) { rand3.rand(MAX_V) }) }

  x.compare!
end

if defined?(RubyVM::YJIT) && RubyVM::YJIT.respond_to?(:enable)
  RubyVM::YJIT.enable

  run_check("#encode w YJIT") do |x|
    hashids = ::Hashids.new(my_salt)
    hashids2 = EncodedId::HashId.new(my_salt)
    hashids_c = EncodedId::HashIdC.new
    rand1 = Random.new(1234)
    rand2 = Random.new(1234)
    rand3 = Random.new(1234)

    x.report("Hashids") { hashids.encode(*Array.new(10) { rand1.rand(MAX_V) }) }
    x.report("EncodedId::HashId") { hashids2.encode(*Array.new(10) { rand2.rand(MAX_V) }) }
    x.report("EncodedId::HashIdC") { hashids_c.encode(Array.new(10) { rand3.rand(MAX_V) }) }

    x.compare!
  end
end
