#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"

require "benchmark/ips"
require "encoded_id"
require "hashids"

require "encoded_id/extension"

A_SALT = "salt!"

MAX_V = 1_000_000

def run_check(title, &block)
  puts "\n\n# #{title}:"
  puts "-------------------\n\n"

  Benchmark.ips(time: 5, warmup: 1, &block)
end

def encode_check(title, size_of_id_collection = 10)
  run_check title do |x|
    hashids = ::Hashids.new(A_SALT)
    hashids2 = EncodedId::HashId.new(A_SALT)
    hashids_c = EncodedId::HashIdC.new
    rand1 = Random.new(1234)

    prepared_inputs = size_of_id_collection.times.map { rand1.rand(MAX_V) }

    x.report("Hashids") { hashids.encode(prepared_inputs) }
    x.report("EncodedId::HashId") { hashids2.encode(prepared_inputs) }
    x.report("EncodedId::HashIdC") { hashids_c.encode(prepared_inputs) }

    x.compare!
  end
end

# Check implementations generate same results
hashids = ::Hashids.new(A_SALT)
hashids2 = EncodedId::HashId.new(A_SALT)
hashids_c = EncodedId::HashIdC.new
rand1 = Random.new(1234)
inputs = 10.times.map { rand1.rand(MAX_V) }
i1 = hashids.encode(inputs)
i2 = hashids2.encode(inputs)
i3 = hashids_c.encode(inputs)
puts i1
puts i2
puts i3
raise "Mismatch" if i1 != i2 || i2 != i3 || i1 != i3

##########

raise "Turn off YJIT please" if defined?(RubyVM::YJIT) && RubyVM::YJIT.respond_to?(:enable) && RubyVM::YJIT.enabled?

encode_check("#encode - 1 ID", 1)
encode_check("#encode - 10 IDs", 10)

if defined?(RubyVM::YJIT) && RubyVM::YJIT.respond_to?(:enable) && !RubyVM::YJIT.enabled?
  RubyVM::YJIT.enable

  encode_check("#encode w YJIT - 1 ID", 1)
  encode_check("#encode w YJIT - 10 IDs", 10)
  encode_check("#encode w YJIT - 1000 IDs", 1_000)
end
